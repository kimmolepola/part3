{"version":3,"sources":["NameChecker.js","Contact.js","Contacts.js","services/persons.js","IdIndexFinder.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["CheckIfExists","persons","newName","person","name","toLowerCase","id","Contact","number","filter","deletePerson","personId","includes","onClick","Contacts","map","key","baseUrl","axios","get","then","response","data","newObject","post","put","delete","find","i","length","message","className","setNotification","setTimeout","notification","App","useState","setPersons","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","useEffect","personService","initialPersons","updatePerson","status","newPersons","indexFinder","Notification","catch","error","value","onChange","event","target","onSubmit","preventDefault","pers","getId","returnedPerson","concat","window","confirm","type","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fe325eb.chunk.js","sourcesContent":["/* exported person */\r\n\r\nconst CheckIfExists = (persons, newName) => {\r\n    for (const person of persons) { // eslint-disable-line no-unused-vars\r\n        if (person.name.toLowerCase() === newName.toLowerCase()) {\r\n            return person.id\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\nexport default CheckIfExists","import React from 'react'\r\n\r\nconst Contact = ({ name, number, filter, deletePerson, personId }) => {\r\n    if (name.toLowerCase().includes(filter)) {\r\n        return (\r\n            <div>{name} {number}\r\n            <button onClick={() => deletePerson(personId, name)}>delete</button>\r\n            </div>\r\n        )\r\n    }\r\n    return <></>\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport Contact from './Contact'\r\n\r\nconst Contacts = ({ persons, filter, deletePerson }) => {\r\n    return persons.map(person =>\r\n        <Contact\r\n            key={person.name}\r\n            name={person.name}\r\n            number={person.number}\r\n            filter={filter}\r\n            deletePerson={deletePerson}\r\n            personId = {person.id}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Contacts","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response)\r\n}\r\n\r\nexport default {getAll, create, update, remove}","\r\nconst find = (persons, id) => {\r\n    for (let i = 0; i < persons.length; i++) {\r\n        if (persons[i].id === id) {\r\n            return i\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\nexport default find","import React from 'react'\r\n\r\nconst Notify = (message, className, setNotification) => {\r\n    setNotification({ message: message, className: className })\r\n    setTimeout(() => {\r\n        setNotification({ message: null })\r\n    }, 5000)\r\n}\r\n\r\nconst Notification = ({ notification }) => {\r\n    if (notification.message === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className={notification.className}>\r\n            {notification.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default { Notify, Notification }","import React, { useState, useEffect } from 'react'\nimport getId from './NameChecker'\nimport Contacts from './Contacts'\nimport personService from './services/persons'\nimport indexFinder from './IdIndexFinder'\nimport './App.css'\nimport Notification from './Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [notification, setNotification] = useState({ message: '', className: '' })\n\n  useEffect(() => {\n    personService.getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    personService.getAll().then(pers => setPersons(pers))\n    const id = getId(persons, newName)\n    if (id === -1) {\n      personService.create({ name: newName, number: newNumber })\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          Notification.Notify(`Added ${returnedPerson.name}`, \"success\", setNotification)\n        })\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        updatePerson(id, newName, newNumber)\n      }\n    }\n  }\n\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name} ?`)) {\n      personService.remove(id)\n        .then(response => {\n          if (response.status === 204) {\n            setPersons(persons.filter(person => person.id !== id))\n          }\n        })\n    }\n  }\n\n  const updatePerson = (id, newName, newNumber) => {\n    const newObject = { name: newName, number: newNumber }\n    personService.update(id, newObject)\n      .then(response => {\n        if (response.status === 200) {\n          const newPersons = [...persons]\n          newPersons[indexFinder(newPersons, id)] = response.data\n          setPersons(newPersons)\n          Notification.Notify(`Updated ${response.data.name}`, \"success\", setNotification)\n        }\n      })\n      .catch(error => {\n        setPersons(persons.filter(person => person.id !== id))\n        Notification.Notify(`Information of ${newName} has already been removed from server`, \"error\", setNotification)\n      })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <div><Notification.Notification notification={notification} /></div>\n      <div>\n        filter shown with: <input value={newFilter} onChange={handleFilterChange} />\n      </div>\n      <h2>add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <Contacts persons={persons} filter={newFilter} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}